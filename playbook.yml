---
- name: Setup Dockerized E-commerce Application
  hosts: vagrant
  become: yes
  vars_files:
    - vars/main.yml

  roles:
    - role: common
    - role: docker
    - role: frontend
    - role: backend
    - role: mongodb

  tasks:
    - name: Clone the GitHub repository
      git:
        repo: 'https://github.com/KoomeSpace/yolo.git'
        dest: /var/www/html/yolo
      tags: clone

- name: Set up the application
  hosts: vagrant
  become: yes
  tasks:
    - name: Install frontend dependencies
      command: npm install
      args:
        chdir: /var/www/html/yolo/client
      tags: setup

    - name: Install backend dependencies
      command: npm install
      args:
        chdir: /var/www/html/yolo/backend
      tags: setup

    - name: Build frontend Docker image
      command: docker build -t "{{ frontend }}" -f /var/www/html/yolo/client/Dockerfile /var/www/html/yolo/client
      tags: setup

    - name: Build backend Docker image
      command: docker build -t "{{ backend }}" -f /var/www/html/yolo/backend/Dockerfile /var/www/html/yolo/backend
      tags: setup

    - name: Run frontend Docker container
      docker_container:
        name: "{{ frontend }}"
        image: "{{ frontend }}"
        state: started
        ports:
          - "3000:3000"
      tags: setup

    - name: Run backend Docker container
      docker_container:
        name: "{{ backend }}"
        image: "{{ backend }}"
        state: started
        ports:
          - "3001:3001"
      tags: setup

    - name: Run MongoDB Docker container
      docker_container:
        name: "{{ mongodb }}"
        image: "{{ mongodb }}"
        state: started
        ports:
          - "27017:27017"
      tags: setup

- name: Verify the application
  hosts: localhost
  tasks:
    - name: Check if frontend is running
      uri:
        url: http://localhost:3000
      register: frontend_response
      until: frontend_response.status == 200
      retries: 10
      delay: 5

    - name: Check if backend is running
      uri:
        url: http://localhost:3001
      register: backend_response
      until: backend_response.status == 200
      retries: 10
      delay: 5
